#####################################################################
#    Macros
#####################################################################

## Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}

[gcode_macro BED_MESH_PRINT_AREA]
; gcode parameters
variable_parameter_AREA_START_X : 0
variable_parameter_AREA_START_Y : 0
variable_parameter_AREA_END_X : 150
variable_parameter_AREA_END_Y : 180
; the "safe" area that the probe can reach, use value in config->[bed_mesh]
variable_mesh_min_x :40
variable_mesh_min_y :40
variable_mesh_max_x :260
variable_mesh_max_y :260
; the clearance between print area and probe area 
variable_mesh_area_offset : 10
; number of sample per probe point
variable_probe_samples : 2
; mesh matrix size
variable_mesh_size : 5
gcode:
    {% if (params.AREA_START_X|default(0)|float < params.AREA_END_X|default(0)|float) and (params.AREA_START_Y|default(0)|float < params.AREA_END_Y|default(0)|float) %}
        {% set max_mesh_area = (mesh_max_x|float - mesh_min_x|float)*(mesh_max_y|float - mesh_min_y|float) %}

        {% if params.AREA_START_X|default(0)|float - mesh_area_offset >=  mesh_min_x %}
            {% set mesh_min_x = params.AREA_START_X|default(0)|float - mesh_area_offset %}
        {% endif %}

        {% if params.AREA_START_Y|default(0)|float - mesh_area_offset >=  mesh_min_y %}
            {% set mesh_min_y = params.AREA_START_Y|default(0)|float - mesh_area_offset %}
        {% endif %}

        {% if params.AREA_END_X|default(0)|float + mesh_area_offset <=  mesh_max_x %}
            {% set mesh_max_x = params.AREA_END_X|default(0)|float + mesh_area_offset %}
        {% endif %}

        {% if params.AREA_END_Y|default(0)|float + mesh_area_offset <=  mesh_max_y %}
            {% set mesh_max_y = params.AREA_END_Y|default(0)|float + mesh_area_offset %}
        {% endif %}

        PRINT MSG="Set custom mesh area to ({mesh_min_x},{mesh_min_y}),({mesh_max_x},{mesh_max_y})"

        {% if (params.AREA_END_X|float - params.AREA_START_X|float)*(params.AREA_END_Y|float - params.AREA_START_Y|float) < (max_mesh_area * 0.85) %}
            {% set mesh_size = 5 %}
        {% elif (params.AREA_END_X|float - params.AREA_START_X|float)*(params.AREA_END_Y|float - params.AREA_START_Y|float) < (max_mesh_area * 0.65) %}
            {% set mesh_size = 4 %}
        {% elif (params.AREA_END_X|float - params.AREA_START_X|float)*(params.AREA_END_Y|float - params.AREA_START_Y|float) < (max_mesh_area * 0.50) %}
            {% set mesh_size = 3 %}
        {% endif %}
        PRINT MSG="Set custom mesh matrix to {mesh_size}x{mesh_size}"

        BED_MESH_CALIBRATE mesh_min={mesh_min_x|float},{mesh_min_y|float} mesh_max={mesh_max_x|float},{mesh_max_y|float} probe_count={mesh_size|int},{mesh_size|int} samples={probe_samples|int}
    {% else %}
        PRINT MSG="Invalid custom mesh parameters, probe using default setting"
        BED_MESH_CALIBRATE
    {% endif %}


[gcode_macro LIGHT_OFF]
gcode:
    SET_LED LED=caselight RED=0 GREEN=0 BLUE=0
    SET_LED LED=fysetc_mini12864 RED=0.1 GREEN=0.1 BLUE=0.1

[gcode_macro LIGHT_ON]
gcode:
    SET_LED LED=caselight RED=1 GREEN=1 BLUE=1
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=3 

[gcode_macro HEAT_SOAK]
description: Heat soak
#uncomment HEAT_SOAK lines in PRINT_START to enable
gcode:
    G0 X60 Y60 Z10                                   ; move toolhead to centre
    PAUSE
    M106 S255                                        ; run cooling fans at full power
    M117
    UPDATE_DELAYED_GCODE ID=SOAK_TIME DURATION=600   ; resume after 300 seconds


[gcode_macro G32]
description: HOME X/Y/Z, QGL, Calibrate Z
#uncomment HEAT_SOAK lines in PRINT_START to enable
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28
    CALIBRATE_Z


[delayed_gcode SOAK_TIME]
gcode:
    RESUME
    M107                                             ; turn off cooling fans

[gcode_macro SKIP_HEAT_SOAK]
gcode:
    RESUME
    UPDATE_DELAYED_GCODE ID=SOAK_TIME DURATION=1

[gcode_macro PRINT_START]
gcode:
    {% set bed_temp = params.BED_TEMP|default(100)|float %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(220)|float %}
    {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
    {% set area_start_x = params.AREA_START_X|default(40)|float %}
    {% set area_start_y = params.AREA_START_Y|default(40)|float %}
    {% set area_end_x = params.AREA_END_X|default(260)|float %}
    {% set area_end_y = params.AREA_END_Y|default(260)|float %}

    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0   
    BED_MESH_CLEAR                    ; clear mesh
    CLEAR_PAUSE
    M220 S100 ; reset feedrate

    G28                             ; Home the printer
    G90                               ; Use absolute coordinates
    PARKCENTER                        ; Move to center

    M117 Heating..
    M106 S255                         ; set print fan to full speed
    M140 S{bed_temp}                  ; Start bed heating
    M190 S{bed_temp}                  ; Wait for bed to reach temperature
    M107                              ; turn print fan off

    M117 Leveling..
    QUAD_GANTRY_LEVEL PARK=false
    clean_nozzle                      ; clean nozzle
    CALIBRATE_Z
    BED_MESH_PRINT_AREA AREA_START_X={params.AREA_START_X|float} AREA_START_Y={params.AREA_START_Y|float} AREA_END_X={params.AREA_END_X|float} AREA_END_Y={params.AREA_END_Y|float}
    M109 S{extruder_temp}             ; Set and wait for nozzle to reach temperature

[gcode_macro PRIME_LINE]
gcode:
    {% set retract = 10 %}
    M117 Intro Line..
    G90                               ; Use absolute coordinates
    G1 Y0 X130 Z5 F12000              ; Move the nozzle to the front and near the bed
    G1 Z0.7 F300                      ; Move the nozzle very close to the bed
    G92 E0.0                          ; set extruder position to 0
    G1 E{retract} F3600               ; extrude retract
    G92 E0.0                          ; set extruder option to 0
    G1 X180 E15.0 F500.0              ; intro line
    G92 E0.0                          ; set extruder Poisson to 0
    G1 X174 F6000                     ; move away from intro line
    M83

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    G1 Z10 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X150 Y280 F3600            ; park nozzle at rear
    {% if unload|int == 1%}
        ERCF_EJECT
    {% endif %}
    M107                           ; turn off fan
    BED_MESH_CLEAR

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 20.0) %}
      {% set z_safe = 20.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  BASE_CANCEL_PRINT

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER VALUE=0
        
[gcode_macro PARKCENTER]
gcode:
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=PARKCENTER_state
    _CG28                          ; Home if not already homed
    G90                            ; absolute positioning
    G0 X150 Y150 Z{Z} F12000       ; move to center
    RESTORE_GCODE_STATE NAME=PARKCENTER_state

[virtual_sdcard]
path: ~/gcode_files

[pause_resume]
recover_velocity: 300.0

[display_status]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 5.0) %}
      {% set z_safe = 5.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  G92 E0
  G1 E-1.0 F1500.0
  G90
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% if printer["gcode_macro ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You can't resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
    {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_state
        G90
        {% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
            SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        {% endif %}
        BASE_RESUME
    {% endif %}