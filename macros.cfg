#####################################################################
#    Macros
#####################################################################
[exclude_object]

[idle_timeout]
timeout: 1800
gcode:
  M84
  OFF_LED
  TURN_OFF_HEATERS

[gcode_macro TOGGLE_LED]
gcode:
    {% if printer.save_variables.variables.led_status|int == 1 %}
        SET_LED LED=caselight RED=0 GREEN=0 BLUE=0
        SET_LED LED=fysetc_mini12864 RED=0.1 GREEN=0.1 BLUE=0.1
        SAVE_VARIABLE VARIABLE=led_status VALUE=0
    {% else %}
        SET_LED LED=caselight RED=1 GREEN=1 BLUE=1
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=3         
        SAVE_VARIABLE VARIABLE=led_status VALUE=1        
    {% endif %}
    { action_respond_info("Toggle led.")}

[gcode_macro OFF_LED]
gcode:
    SET_LED LED=caselight RED=0 GREEN=0 BLUE=0
    SET_LED LED=fysetc_mini12864 RED=0.1 GREEN=0.1 BLUE=0.1
    SAVE_VARIABLE VARIABLE=led_status VALUE=0

[delayed_gcode INIT]
initial_duration: 1
gcode:
    PRINT MSG="Init..."
    ; set deault state of enclosure led
    SAVE_VARIABLE VARIABLE=led_status VALUE=1
    PRINT MSG="Ready"

[gcode_macro AUTO_SAVE_CONFIG]
gcode:
    {% if printer.configfile.save_config_pending %}
        PRINT MSG="Saving config"
        SAVE_CONFIG
    {% endif %}

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
        M117 {params.MSG | string}
    {% endif %}

[gcode_macro PRINT_START]
variable_parameter_EXTRUDER: 245
variable_parameter_BED: 110
variable_parameter_PRINT_MIN : 0,0
variable_parameter_PRINT_MAX : 0,0
variable_parameter_INITIAL_EXTRUDER: 0
gcode:
    CLEAR_PAUSE
    M220 S100 ; reset feedrate
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0   

    PRINT MSG="Homing..."
    _CG28                             ; Home the printer
    G90                               ; Use absolute coordinates
    PARKCENTER                        ; Move to center

    PRINT MSG="Waiting for temperature"

    ; preheat temp
    M106 S255                         ; set print fan to full speed
    M140 S{params.BED|default(110)|float - 10}
    M104 S150

    ; wait
    M190 S{params.BED|default(110)|float - 10}

    ; set real temp
    M140 S{params.BED|default(110)|float}
    M104 S{params.EXTRUDER|default(200)|float}

    ; wait
    M190 S{params.BED|default(110)|float}
    M109 S{params.EXTRUDER|default(200)|float}
    M107                              ; turn print fan off

    PRINT MSG="QGL..."
    G28 Z
    QUAD_GANTRY_LEVEL PARK=false   

    PRINT MSG="Building mesh..."
    BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}

    PRINT MSG="Z-offset..."
    CLEAN_NOZZLE                      
    CALIBRATE_Z

    PRINT MSG="Tool change..."
    ERCF_CHANGE_TOOL_STANDALONE TOOL={params.INITIAL_EXTRUDER|default(0)|int}
    CLEAN_NOZZLE

    PRINT MSG="Prime Line..."
    PRIME_LINE

    PRINT MSG="{printer.print_stats.filename}"

[gcode_macro PRIME_LINE]
gcode:
    {% set retract = 10 %}
    G90                               ; Use absolute coordinates
    G1 Y0 X130 Z5 F12000              ; Move the nozzle to the front and near the bed
    G1 Z0.7 F300                      ; Move the nozzle very close to the bed
    G92 E0.0                          ; set extruder position to 0
    G1 E{retract} F3600               ; extrude retract
    G92 E0.0                          ; set extruder option to 0
    G1 X180 E15.0 F500.0              ; intro line
    G92 E0.0                          ; set extruder Poisson to 0
    G1 X174 F6000                     ; move away from intro line
    M83

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    PRINT MSG="Done printing!"
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    G1 Z10 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X150 Y280 F3600            ; park nozzle at rear
    {% if unload|int == 1%}
        ERCF_EJECT
    {% endif %}
    M107                           ; turn off fan
    BED_MESH_CLEAR

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  PRINT MSG="Aborted!"
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 20.0) %}
      {% set z_safe = 20.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  BASE_CANCEL_PRINT

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER VALUE=0

[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

[gcode_macro PARKCENTER]
gcode:
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=PARKCENTER_state
    _CG28                          ; Home if not already homed
    G90                            ; absolute positioning
    G0 X150 Y150 Z{Z} F12000       ; move to center
    RESTORE_GCODE_STATE NAME=PARKCENTER_state

[virtual_sdcard]
path: ~/gcode_files

[pause_resume]
recover_velocity: 300.0

[display_status]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 5.0) %}
      {% set z_safe = 5.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  G92 E0
  G1 E-1.0 F1500.0
  G90
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% if printer["gcode_macro ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You can't resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
    {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_state
        G90
        {% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
            SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        {% endif %}
        BASE_RESUME
    {% endif %}