[exclude_object]

[save_variables]
filename: /home/pi/klipper_config/vars.cfg

[virtual_sdcard]
path: ~/gcode_files

[pause_resume]
recover_velocity: 300.0

[display_status]

######################### CONFIG BACKUP #########################

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
	
[gcode_shell_command backup_cfg]
command: sh /home/pi/MyScripts/autocommit.sh
timeout: 30.
verbose: True

######################### IDLE/SHUTDOWN #########################

[idle_timeout]
gcode:
  ;G91
  ;G1 Z5 F18000.0 
  ;G90                                 																
  ;G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F18000.0  
  OFF
timeout: 7200 # 2 hrs

[delayed_gcode DELAYED_OFF]
gcode:
	OFF

######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	
[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE
	
# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	SET_PRESSURE_ADVANCE ADVANCE={k}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
	OFFRGB

######################### SAFETY #########################

# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 HOLDCURRENT=0.35
	
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	

######################### NEOPIXELS RGB CONTROLS #########################

# Set LCD RGB at startup
[delayed_gcode SETRGB]
initial_duration: 1
gcode:
	RESETRGB
	
# Default RGB
[gcode_macro RESETRGB]
gcode:
	SET_LED LED=caselight RED=1 GREEN=1 BLUE=1
    STATUS_READY

[gcode_macro OFFRGB]
gcode:
	SET_LED LED=caselight RED=0 GREEN=0 BLUE=0
    STATUS_OFF

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
	G28
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	G28 Z

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

######################### FLUIDD WEB MACROS #########################

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	## PETG
	#{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
	#	SET_PRESSURE_ADVANCE ADVANCE=
	# PLA
	{% elif printer.heater_bed.target <= 65 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.035
	# Catch-all
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% endif %}