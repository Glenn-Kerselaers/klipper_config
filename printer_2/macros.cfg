#####################################################################
#    Macros
#####################################################################

[gcode_shell_command backup_cfg]
command: sh /home/pi/MyScripts/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

[idle_timeout]
timeout: 1800

## Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}

[gcode_macro lights_on]
gcode:
  {action_call_remote_method("set_device_power",
                             device="light_strip",
                             state="on")}

[gcode_macro lights_off]
gcode:
  {action_call_remote_method("set_device_power",
                             device="light_strip",
                             state="off")}

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro DISABLE_MOTORS]
gcode:
    M18

[respond]
default_type: command

[gcode_macro BED_MESH_PRINT_AREA]
; gcode parameters
variable_parameter_AREA_START_X : 0
variable_parameter_AREA_START_Y : 0
variable_parameter_AREA_END_X : 150
variable_parameter_AREA_END_Y : 180
; the "safe" area that the probe can reach, use value in config->[bed_mesh]
variable_mesh_min_x :25
variable_mesh_min_y :25
variable_mesh_max_x :225
variable_mesh_max_y :225
; the clearance between print area and probe area 
variable_mesh_area_offset : 15
; number of sample per probe point
variable_probe_samples : 2
; mesh matrix size
variable_mesh_size : 5
gcode:
    {% if (params.AREA_START_X|default(0)|float < params.AREA_END_X|default(0)|float) and (params.AREA_START_Y|default(0)|float < params.AREA_END_Y|default(0)|float) %}
        {% set max_mesh_area = (mesh_max_x|float - mesh_min_x|float)*(mesh_max_y|float - mesh_min_y|float) %}

        {% if params.AREA_START_X|default(0)|float - mesh_area_offset >=  mesh_min_x %}
            {% set mesh_min_x = params.AREA_START_X|default(0)|float - mesh_area_offset %}
        {% endif %}

        {% if params.AREA_START_Y|default(0)|float - mesh_area_offset >=  mesh_min_y %}
            {% set mesh_min_y = params.AREA_START_Y|default(0)|float - mesh_area_offset %}
        {% endif %}

        {% if params.AREA_END_X|default(0)|float + mesh_area_offset <=  mesh_max_x %}
            {% set mesh_max_x = params.AREA_END_X|default(0)|float + mesh_area_offset %}
        {% endif %}

        {% if params.AREA_END_Y|default(0)|float + mesh_area_offset <=  mesh_max_y %}
            {% set mesh_max_y = params.AREA_END_Y|default(0)|float + mesh_area_offset %}
        {% endif %}

        M118 Set custom mesh area to ({mesh_min_x},{mesh_min_y}),({mesh_max_x},{mesh_max_y})

        {% if (params.AREA_END_X|float - params.AREA_START_X|float)*(params.AREA_END_Y|float - params.AREA_START_Y|float) < (max_mesh_area * 0.85) %}
            {% set mesh_size = 5 %}
        {% elif (params.AREA_END_X|float - params.AREA_START_X|float)*(params.AREA_END_Y|float - params.AREA_START_Y|float) < (max_mesh_area * 0.65) %}
            {% set mesh_size = 4 %}
        {% elif (params.AREA_END_X|float - params.AREA_START_X|float)*(params.AREA_END_Y|float - params.AREA_START_Y|float) < (max_mesh_area * 0.50) %}
            {% set mesh_size = 3 %}
        {% endif %}
        M118 Set custom mesh matrix to {mesh_size}x{mesh_size}

        BED_MESH_CALIBRATE mesh_min={mesh_min_x|float},{mesh_min_y|float} mesh_max={mesh_max_x|float},{mesh_max_y|float} probe_count={mesh_size|int},{mesh_size|int} samples={probe_samples|int}
    {% else %}
        M118 Invalid custom mesh parameters, probe using default setting
        BED_MESH_CALIBRATE

    {% endif %}

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(110)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(245)|float %}
    {% set area_start_x = params.AREA_START_X|default(25)|float %}
    {% set area_start_y = params.AREA_START_Y|default(10)|float %}
    {% set area_end_x = params.AREA_END_X|default(225)|float %}
    {% set area_end_y = params.AREA_END_Y|default(225)|float %}

    lights_on
    M117 Homing...
    ;BED_MESH_CLEAR
    M140 S{BED}                       ; Heat bed
	  M190 S{BED}                       ; Heat bed & wait

    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion
    G28 ; home all axes

    G1 Z20 F240

    BED_MESH_PRINT_AREA AREA_START_X={params.AREA_START_X|float} AREA_START_Y={params.AREA_START_Y|float} AREA_END_X={params.AREA_END_X|float} AREA_END_Y={params.AREA_END_Y|float}

    M104 S{EXTRUDER}                  ; Set extruder final temp
    M109 S{EXTRUDER}                  ; Heat extruder & wait

    PRIME_LINE                          ; Print prime line
    M117 Printing

# prime the nozzle 
[gcode_macro PRIME_LINE]
gcode: 
    G92 E0
    G90
    G0 X13 Y13 F6000
    G0 Z0.4
    G91
    G1 X120 E30 F1200
    G1 Y1
    G1 X-120 E30 F1200
    G92 E0
    G90
    G1 Z20.0 F3000
    G92 E0

[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z10 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0 X0 Y210 F3600         			   ; park
    DISABLE_MOTORS
    BED_MESH_CLEAR
    M117 Finished!
    lights_off
    CLEAR_PAUSE
    SDCARD_RESET_FILE
	
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PRINT_END
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
	
[gcode_macro LOAD_MESH_TEMP]
gcode:
  {% set BED_TEMPERATURE = params.BED_TEMPERATURE|default(110)|int %}
  {% set FORCE = params.FORCE|default(0)|int %}
  
  {action_respond_info("- AUTOMATED BED MESH GENERATOR -")}
  {% if BED_TEMPERATURE|int < 30 %}
    {action_respond_info("Your bed temp is to low, make sure it is at least 30 or higher")}
  {% else %}
    {% if printer.configfile.config["bed_mesh " + BED_TEMPERATURE] is defined and FORCE|int == 0 %}
      BED_MESH_PROFILE LOAD={BED_TEMPERATURE}
      {action_respond_info("Succesfully loaded bed_mesh "+ BED_TEMPERATURE)}
    {% else %}
      {% if printer.configfile.config["bed_mesh " + BED_TEMPERATURE] is defined and FORCE|int == 1 %}
        BED_MESH_PROFILE REMOVE={BED_TEMPERATURE}
      {% endif %}
      {action_respond_info("bed_mesh not defined, your bed temperature will go up!")}
      {action_respond_info("We will probe the bed and save the mesh as bed_mesh "+ BED_TEMPERATURE)}
      ADD_BED_MESH TARGET_TEMP={BED_TEMPERATURE}
    {% endif %}
  {% endif %}


[gcode_macro ADD_BED_MESH]
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(30)|int %}
  
  M190 S{TARGET_TEMP}
  BED_MESH_CALIBRATE
  BED_MESH_PROFILE SAVE={TARGET_TEMP}

[gcode_macro SCREWS_TILT]
gcode:
    M140 S110                       ; Heat bed
	  M190 S110                       ; Heat bed & wait
    G28
    SCREWS_TILT_CALCULATE